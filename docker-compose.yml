version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    # ports 제거 - 내부 통신만 사용
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - kafka-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      # JMX 9101 제거 - Prometheus로 대체
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_HEAP_OPTS: "-Xmx1.5G -Xms1G"
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - kafka-network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

# Kafka UI 제거 - 부하테스트에 집중

  # Grafana 모니터링 (성능 비교용)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"  # 포트 변경 - 프론트엔드와 충돌 방지
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_DEFAULT_LOCALE=ko-KR
    volumes:
      - grafana-data:/var/lib/grafana
      - ./kafka-performance-dashboard.json:/var/lib/grafana/dashboards/kafka-performance.json:ro
    networks:
      - kafka-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Prometheus 모니터링
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"  # 포트 변경
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - kafka-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15
    container_name: postgres-db
    # ports 제거 - 백엔드 내부 접근만
    environment:
      POSTGRES_DB: kafrika_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - kafka-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # 백엔드 애플리케이션
  backend:
    build: ./BE  # 빌드 경로를 BE 폴더로 변경
    container_name: kafka-backend
    depends_on:
      - kafka
      - postgres
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: dev
      KAFKA_SERVER: kafka:29092
      DATASOURCE_URL: jdbc:postgresql://postgres:5432/kafrika_db
      DATASOURCE_USERNAME: postgres
      DATASOURCE_PASSWORD: password
      JAVA_OPTS: "-Xmx512M -Xms256M"
    networks:
      - kafka-network
    deploy:
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 256M

  # 프론트엔드 애플리케이션
  frontend:
    build: ./FE  # 프론트엔드 빌드
    container_name: kafka-frontend
    depends_on:
      - backend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:8080
      - REACT_APP_WS_URL=ws://localhost:8080/ws
    networks:
      - kafka-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

networks:
  kafka-network:
    driver: bridge

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  postgres-data:
  grafana-data:
  prometheus-data:
